This is a self-hosted Next.js and Supabase project. Designed for developers who want full control over their stack while maintaining rapid development capabilities. Optimized for deployment on Coolify.

1. Tech Stack

- Next.js 15+
- Supabase (self-hosted)
- React 19+
- TypeScript 5+
- Tailwind CSS
- Shadcn UI
- lucide-react
- Legend State
- Zod
- Playwright
- Sentry
- Coolify

2. Component Development

- Use Shadcn UI components as base
- New components must:
  - Be TypeScript-first with prop types
  - Use Legend State observables for state
  - Follow dashboard/sidebar.tsx pattern for layout components
  - Support dark/light theme using CSS variables from globals.css
  - Use dynamic imports for non-critical features

3. API Development

- Next.js API Routes:

  - Include JSDoc comments for Swagger docs
  - Use Zod for input validation
  - Follow security patterns
  - Use service role key for Supabase interactions as admin
  - Implement error handling with Sentry captureException

- Next.js Actions:
  - Be colocated with related components in app/(actions) directory
  - Use Zod schemas for input validation
  - Never expose sensitive logic to client-side using 'use server' directive
  - Use server-only utilities for Supabase interactions
  - Implement error handling with Sentry captureException
  - Follow security patterns

4. Testing

- All new features require Playwright tests matching tests/e2e/account.spec.ts structure
- Test setup must:
  - Use supabaseAdminTest client from tests/utils/supabaseTest.ts
  - Include mobile testing using playwright.config.ts
  - Use test.afterAll to cleanup after each test
  - Use test.beforeAll to setup before each test

5. State Management

- Use Legend State observables
- Wrap components with observer() HOC when using observables
- Complex state logic should be in dedicated stores under src/stores/

6. Styling

- Follow Tailwind utility-first approach from globals.css and tailwind.config.ts
- Use shadcn/ui for components
- Mobile-first responsive design using useIsMobile() hook
- Use motion (framer motion) for animations when appropriate
- Use icons from lucide-react

7. Documentation

- Update relevant sections when making changes:
  - architecture.md for system design changes
  - documentation.md for setup/process changes
  - suggestions.md for DX improvements
  - Keep JSDoc comments updated in API routes

8. Security

- Never expose SUPABASE_SERVICE_ROLE_KEY client-side
- All auth forms must implement OTP protection
- Use database-enforced RLS policies for role checks
- Use user role to check for access

9. Performance

- Use dynamic imports for non-critical components
- Optimize Supabase queries with select()/range()
- Implement Suspense boundaries for data fetching
- Follow carousel.tsx patterns for heavy UI components
- Use Supabase for real-time data updates

10. Deployment

- All Supabase migrations must:
  - Be included in PRs via supabase/migrations/
  - Follow patterns in architecture.md
- Coolify configuration must:
  - Use pre-deploy scripts for migrations
  - Follow backup strategy from documentation.md

11. Code Quality

- Strict TypeScript enforcement (no implicit any)
- Follow ESLint rules from .eslintrc.json
- Match Prettier formatting from .prettierrc
- All components must have prop types
- Implement loading states if needed
- Implement error boundaries in components and error messages using sonner Toast if needed

12. Error Handling

- Integrate Sentry monitoring
- Use Zod for error validation in API routes
- Implement proper error boundaries in components
